<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API ƒê√°nh D·∫•u Th√¥ng B√°o ƒê√£ ƒê·ªçc - Mobile</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 3px solid #007bff;
            padding-bottom: 10px;
        }
        h2 {
            color: #007bff;
            margin-top: 30px;
            border-left: 4px solid #007bff;
            padding-left: 15px;
        }
        .endpoint {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }
        .method {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 3px;
            font-weight: bold;
            color: white;
            margin-right: 10px;
        }
        .post { background-color: #007bff; }
        .parameter {
            background: #e9ecef;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .param-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        .param-table th, .param-table td {
            border: 1px solid #dee2e6;
            padding: 12px;
            text-align: left;
        }
        .param-table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        .required { color: #dc3545; }
        .optional { color: #6c757d; }
        .example {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            padding: 15px;
            margin: 15px 0;
            overflow-x: auto;
        }
        .response-example {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
        }
        .success-badge {
            background: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
        }
        .warning-badge {
            background: #ffc107;
            color: #000;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì± API ƒê√°nh D·∫•u Th√¥ng B√°o ƒê√£ ƒê·ªçc - Mobile</h1>
        
        <p><strong>M√¥ t·∫£:</strong> API ƒë·ªÉ ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc (m·ªôt th√¥ng b√°o c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£ th√¥ng b√°o).</p>
        
        <h2>üîó Endpoint</h2>
        <div class="endpoint">
            <span class="method post">POST</span> /includes/notification_mark_read.php
        </div>
        
        <h2>üîê Authentication</h2>
        <p>API y√™u c·∫ßu JWT token trong header Authorization:</p>
        <div class="example">
            Authorization: Bearer YOUR_JWT_TOKEN
        </div>
        
        <h2>üìã Parameters</h2>
        <table class="param-table">
            <thead>
                <tr>
                    <th>Parameter</th>
                    <th>Type</th>
                    <th>Required</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>notification_id</td>
                    <td>integer</td>
                    <td><span class="optional">Optional</span></td>
                    <td>ID th√¥ng b√°o c·ª• th·ªÉ c·∫ßn ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc (s·ª≠ d·ª•ng notification_id ho·∫∑c mark_all)</td>
                </tr>
                <tr>
                    <td>mark_all</td>
                    <td>boolean</td>
                    <td><span class="optional">Optional</span></td>
                    <td>ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc (true/false)</td>
                </tr>
                <tr>
                    <td>type</td>
                    <td>string</td>
                    <td><span class="optional">Optional</span></td>
                    <td>Ch·ªâ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc cho lo·∫°i th√¥ng b√°o c·ª• th·ªÉ (khi mark_all=true)</td>
                </tr>
            </tbody>
        </table>
        
        <h2>üí° V√≠ D·ª• Request</h2>
        
        <h3>ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o ƒë√£ ƒë·ªçc</h3>
        <div class="example">
            <strong>Method:</strong> POST<br>
            <strong>Content-Type:</strong> application/x-www-form-urlencoded<br><br>
            <strong>Body:</strong><br>
            notification_id=123
        </div>
        
        <h3>ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc</h3>
        <div class="example">
            <strong>Method:</strong> POST<br>
            <strong>Content-Type:</strong> application/x-www-form-urlencoded<br><br>
            <strong>Body:</strong><br>
            mark_all=true
        </div>
        
        <h3>ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë∆°n h√†ng ƒë√£ ƒë·ªçc</h3>
        <div class="example">
            <strong>Method:</strong> POST<br>
            <strong>Content-Type:</strong> application/x-www-form-urlencoded<br><br>
            <strong>Body:</strong><br>
            mark_all=true&type=donhang
        </div>
        
        <h2>üì§ Response Format</h2>
        
        <h3>Success Response</h3>
        <div class="response-example">
{
  "success": true,
  "message": "ƒê√£ ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc",
  "data": {
    "unread_count": 3,
    "affected_rows": 1
  }
}
        </div>
        
        <h3>Success Response (Mark All)</h3>
        <div class="response-example">
{
  "success": true,
  "message": "ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc",
  "data": {
    "unread_count": 0,
    "affected_rows": 15
  }
}
        </div>
        
        <h3>Error Response</h3>
        <div class="response-example">
{
  "success": false,
  "message": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o"
}
        </div>
        
        <h2>üîß S·ª≠ D·ª•ng Trong Mobile App</h2>
        
        <h3>Swift (iOS)</h3>
        <div class="example">
            <pre>
// ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o ƒë√£ ƒë·ªçc
func markNotificationAsRead(notificationId: Int) {
    let url = URL(string: "https://api.example.com/includes/notification_mark_read.php")!
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("Bearer \(jwtToken)", forHTTPHeaderField: "Authorization")
    request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
    
    let body = "notification_id=\(notificationId)"
    request.httpBody = body.data(using: .utf8)
    
    URLSession.shared.dataTask(with: request) { data, response, error in
        if let data = data {
            let result = try? JSONDecoder().decode(MarkReadResponse.self, from: data)
            DispatchQueue.main.async {
                // C·∫≠p nh·∫≠t UI v·ªõi s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc m·ªõi
                self.updateUnreadBadge(result?.data.unread_count ?? 0)
            }
        }
    }.resume()
}

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
func markAllNotificationsAsRead() {
    let url = URL(string: "https://api.example.com/includes/notification_mark_read.php")!
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("Bearer \(jwtToken)", forHTTPHeaderField: "Authorization")
    request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
    
    let body = "mark_all=true"
    request.httpBody = body.data(using: .utf8)
    
    URLSession.shared.dataTask(with: request) { data, response, error in
        // X·ª≠ l√Ω response
    }.resume()
}
            </pre>
        </div>
        
        <h3>Kotlin (Android)</h3>
        <div class="example">
            <pre>
// ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o ƒë√£ ƒë·ªçc
fun markNotificationAsRead(notificationId: Int) {
    val url = "https://api.example.com/includes/notification_mark_read.php"
    val requestBody = FormBody.Builder()
        .add("notification_id", notificationId.toString())
        .build()
    
    val request = Request.Builder()
        .url(url)
        .post(requestBody)
        .addHeader("Authorization", "Bearer $jwtToken")
        .build()
    
    client.newCall(request).enqueue(object : Callback {
        override fun onResponse(call: Call, response: Response) {
            val result = Gson().fromJson(response.body?.string(), MarkReadResponse::class.java)
            runOnUiThread {
                // C·∫≠p nh·∫≠t UI v·ªõi s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc m·ªõi
                updateUnreadBadge(result.data.unread_count)
            }
        }
    })
}

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
fun markAllNotificationsAsRead() {
    val url = "https://api.example.com/includes/notification_mark_read.php"
    val requestBody = FormBody.Builder()
        .add("mark_all", "true")
        .build()
    
    val request = Request.Builder()
        .url(url)
        .post(requestBody)
        .addHeader("Authorization", "Bearer $jwtToken")
        .build()
    
    client.newCall(request).enqueue(object : Callback {
        // X·ª≠ l√Ω response
    })
}
            </pre>
        </div>
        
        <h2>üì± UI Integration Examples</h2>
        
        <h3>Notification List Item</h3>
        <div class="example">
            <pre>
// Khi user tap v√†o th√¥ng b√°o
func didTapNotification(notification: Notification) {
    // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
    markNotificationAsRead(notificationId: notification.id)
    
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn action URL
    if let actionUrl = notification.action_url {
        navigateToUrl(actionUrl)
    }
}
            </pre>
        </div>
        
        <h3>Mark All Button</h3>
        <div class="example">
            <pre>
// Button "ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc"
@IBAction func markAllAsReadButtonTapped(_ sender: UIButton) {
    markAllNotificationsAsRead()
    
    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    updateNotificationListUI()
    updateUnreadBadge(0)
}
            </pre>
        </div>
        
        <h2>üìù Ghi Ch√∫</h2>
        <ul>
            <li>API h·ªó tr·ª£ ƒë√°nh d·∫•u m·ªôt th√¥ng b√°o c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£ th√¥ng b√°o</li>
            <li>C√≥ th·ªÉ l·ªçc theo lo·∫°i th√¥ng b√°o khi ƒë√°nh d·∫•u t·∫•t c·∫£</li>
            <li>Response tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc c√≤n l·∫°i</li>
            <li>Affected rows cho bi·∫øt s·ªë l∆∞·ª£ng th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t</li>
            <li>N√™n c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c sau khi g·ªçi API th√†nh c√¥ng</li>
        </ul>
        
        <h2>üé® UI Suggestions</h2>
        <div class="example">
            <strong>Notification Badge:</strong><br>
            - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc<br>
            - ·∫®n badge khi unread_count = 0<br>
            - Animation khi s·ªë l∆∞·ª£ng thay ƒë·ªïi<br><br>
            
            <strong>Notification List:</strong><br>
            - Visual indicator cho th√¥ng b√°o ch∆∞a ƒë·ªçc<br>
            - Tap ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc v√† ƒëi·ªÅu h∆∞·ªõng<br>
            - Swipe action ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc<br><br>
            
            <strong>Mark All Button:</strong><br>
            - Hi·ªÉn th·ªã khi c√≥ th√¥ng b√°o ch∆∞a ƒë·ªçc<br>
            - Confirmation dialog tr∆∞·ªõc khi ƒë√°nh d·∫•u t·∫•t c·∫£<br>
            - Loading indicator trong qu√° tr√¨nh x·ª≠ l√Ω
        </div>
        
        <h2>‚ö†Ô∏è L∆∞u √ù</h2>
        <div class="example">
            <div class="warning-badge">‚ö†Ô∏è L∆∞u √Ω</div>
            <ul>
                <li>Ph·∫£i cung c·∫•p √≠t nh·∫•t m·ªôt trong hai tham s·ªë: notification_id ho·∫∑c mark_all=true</li>
                <li>N·∫øu cung c·∫•p c·∫£ hai, API s·∫Ω ∆∞u ti√™n notification_id</li>
                <li>Type parameter ch·ªâ c√≥ hi·ªáu l·ª±c khi mark_all=true</li>
                <li>API ch·ªâ c·∫≠p nh·∫≠t th√¥ng b√°o c·ªßa user hi·ªán t·∫°i (t·ª´ JWT token)</li>
                <li>N√™n x·ª≠ l√Ω error case khi network ho·∫∑c server c√≥ v·∫•n ƒë·ªÅ</li>
            </ul>
        </div>
    </div>
</body>
</html>
