import 'dart:async';
import 'package:flutter/material.dart';
import '../../../core/services/api_service.dart';
import '../../../core/services/auth_service.dart';
import '../../../core/services/cart_service.dart' as cart_service;
import '../../../core/services/shipping_events.dart';
import '../../../core/services/shipping_quote_store.dart';

class OrderSummarySection extends StatefulWidget {
  const OrderSummarySection({super.key});

  @override
  State<OrderSummarySection> createState() => _OrderSummarySectionState();
}

class _OrderSummarySectionState extends State<OrderSummarySection> {
  final _api = ApiService();
  final _auth = AuthService();
  int? _shipFee;
  String? _etaText;
  String? _provider;
  StreamSubscription<void>? _shipSub;

  @override
  void initState() {
    super.initState();
    _load();
    // L·∫Øng nghe s·ª± ki·ªán c·∫ßn t√≠nh l·∫°i ph√≠ ship khi ƒë·ªïi ƒë·ªãa ch·ªâ
    _shipSub = ShippingEvents.stream.listen((_) {
      if (!mounted) return;
      _load();
    });
  }

  @override
  void dispose() {
    _shipSub?.cancel();
    super.dispose();
  }

  Future<void> _load() async {
    final u = await _auth.getCurrentUser();
    if (u == null) return;
    // Chu·∫©n b·ªã danh s√°ch items trong gi·ªè
    final cart = cart_service.CartService();
    final items = cart.items
        .map((i) => {
              'product_id': i.id,
              'quantity': i.quantity,
            })
        .toList();
    if (items.isEmpty) {
      // debug khi gi·ªè r·ªóng s·∫Ω kh√¥ng g·ªçi API
      // b·ªè comment n·∫øu c·∫ßn th·∫•y log tr√™n console
      // ignore: avoid_print
      print('üõí cart empty -> skip shipping quote');
      return;
    }
    // debug input g·ª≠i server
    // ignore: avoid_print
    print('üßÆ shipping input items: $items');
    // Call server to compute shipping. Server uses class_ghtk + class_superai,
    // evaluates all providers and returns the cheaper one with an ETA text.
    final quote = await _api.getShippingQuote(userId: u.userId, items: items);
    if (!mounted) return;
    setState(() {
      // Robust parse of dynamic 'fee' (can be int/num/string)
      final dynamic feeDyn = quote?['fee'];
      int? parsedFee;
      if (feeDyn is int) {
        parsedFee = feeDyn;
      } else if (feeDyn is num) {
        parsedFee = feeDyn.toInt();
      } else if (feeDyn is String) {
        // Remove non-digits just in case server returns formatted string
        final onlyDigits = feeDyn.replaceAll(RegExp(r'[^0-9]'), '');
        parsedFee = int.tryParse(onlyDigits);
      }
      _shipFee = parsedFee ?? 0;
      _etaText = quote?['eta_text']?.toString();
      _provider = quote?['provider']?.toString();
      // L∆∞u v√†o store d√πng chung cho c√°c section kh√°c (PaymentDetails, Bottom bar)
      ShippingQuoteStore().setQuote(
        fee: _shipFee!,
        etaText: _etaText,
        provider: _provider,
      );
    });
  }

  void _showInspectionDialog(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) {
        return Container(
          constraints: BoxConstraints(
            maxHeight: MediaQuery.of(context).size.height * 0.8,
            minHeight: 400,
          ),
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // Header - C·ªë ƒë·ªãnh
              Container(
                padding: const EdgeInsets.fromLTRB(16, 16, 16, 12),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                  border: Border(
                    bottom: BorderSide(color: Colors.grey[200]!),
                  ),
                ),
                child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: const Color(0xFF4A90E2).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        Icons.info_outline,
                        color: Color(0xFF4A90E2),
                        size: 20,
                      ),
                    ),
                    const SizedBox(width: 12),
                    const Expanded(
                      child: Text(
                        'Quy ƒë·ªãnh ƒë·ªìng ki·ªÉm h√†ng h√≥a',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF1D1D1F),
                        ),
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close, size: 20),
                    ),
                  ],
                ),
              ),
              
              // Content - Scroll ƒë∆∞·ª£c
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildSection(
                        '1. Quy·ªÅn l·ª£i c·ªßa kh√°ch h√†ng',
                        '‚Ä¢ Ki·ªÉm tra h√†ng h√≥a tr∆∞·ªõc khi thanh to√°n\n‚Ä¢ ƒê∆∞·ª£c ƒë·ªïi/tr·∫£ h√†ng n·∫øu kh√¥ng ƒë√∫ng m√¥ t·∫£\n‚Ä¢ ƒê∆∞·ª£c h·ªó tr·ª£ gi·∫£i quy·∫øt tranh ch·∫•p\n‚Ä¢ ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m nh∆∞ cam k·∫øt',
                      ),
                      _buildSection(
                        '2. Quy tr√¨nh ƒë·ªìng ki·ªÉm',
                        '‚Ä¢ Nh·∫≠n h√†ng t·ª´ nh√¢n vi√™n giao h√†ng\n‚Ä¢ Ki·ªÉm tra bao b√¨, tem ni√™m phong\n‚Ä¢ M·ªü h√†ng ƒë·ªÉ ki·ªÉm tra s·∫£n ph·∫©m\n‚Ä¢ X√°c nh·∫≠n ch·∫•t l∆∞·ª£ng v√† s·ªë l∆∞·ª£ng\n‚Ä¢ Thanh to√°n ho·∫∑c t·ª´ ch·ªëi nh·∫≠n h√†ng',
                      ),
                      _buildSection(
                        '3. L∆∞u √Ω quan tr·ªçng',
                        '‚Ä¢ Th·ªùi gian ki·ªÉm tra: t·ªëi ƒëa 15 ph√∫t\n‚Ä¢ Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng s·∫£n ph·∫©m\n‚Ä¢ Gi·ªØ nguy√™n tem ni√™m phong khi ki·ªÉm tra\n‚Ä¢ Th√¥ng b√°o ngay n·∫øu ph√°t hi·ªán l·ªói\n‚Ä¢ Kh√¥ng l√†m h·ªèng bao b√¨ s·∫£n ph·∫©m',
                      ),
                      _buildSection(
                        '4. Tr∆∞·ªùng h·ª£p t·ª´ ch·ªëi nh·∫≠n h√†ng',
                        '‚Ä¢ S·∫£n ph·∫©m kh√¥ng ƒë√∫ng m√¥ t·∫£\n‚Ä¢ Bao b√¨ b·ªã h·ªèng, r√°ch\n‚Ä¢ Thi·∫øu ph·ª• ki·ªán ƒëi k√®m\n‚Ä¢ S·∫£n ph·∫©m b·ªã l·ªói, h·ªèng\n‚Ä¢ Kh√¥ng ƒë√∫ng s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng',
                      ),
                      
                      const SizedBox(height: 20),
                      
                      // Footer note
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: const Color(0xFFF8F9FA),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: const Color(0xFFE9ECEF),
                            width: 1,
                          ),
                        ),
                        child: const Row(
                          children: [
                            Icon(
                              Icons.security,
                              color: Color(0xFF28A745),
                              size: 20,
                            ),
                            SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                'Ch√∫ng t√¥i cam k·∫øt b·∫£o v·ªá quy·ªÅn l·ª£i kh√°ch h√†ng v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng d·ªãch v·ª• t·ªët nh·∫•t.',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Color(0xFF6C757D),
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildSection(String title, String content) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.w600,
              color: Color(0xFF1D1D1F),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            content,
            style: const TextStyle(
              fontSize: 14,
              color: Color(0xFF6C757D),
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          // H√†ng voucher shop ƒë√£ ·∫©n v√¨ hi·ªÉn th·ªã ngay tr√™n header c·ªßa t·ª´ng shop
          const SizedBox(height: 12),
          Row(
            children: [
              const Icon(Icons.local_shipping, color: Colors.grey),
              const SizedBox(width: 8),
              Text('Ph√≠ v·∫≠n chuy·ªÉn: ${_shipFee != null ? _formatCurrency(_shipFee!) : 'ƒëang t√≠nh...'}'),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              const Icon(Icons.local_shipping, color: Colors.grey),
              const SizedBox(width: 8),
              Text('D·ª± ki·∫øn: ${_etaText ?? 'ƒëang t√≠nh...'}'),
            ],
          ),
          if (_provider != null) const SizedBox(height: 6),
          if (_provider != null)
            Row(
              children: [
                const Icon(Icons.local_post_office, color: Colors.grey),
                const SizedBox(width: 8),
                Text('ƒê∆°n v·ªã: ${_provider!}'),
              ],
            ),
          const SizedBox(height: 12),
          Row(
            children: [
              const Icon(Icons.verified, color: Color(0xFF4A90E2)),
              const SizedBox(width: 8),
              const Text('ƒê∆∞·ª£c ƒë·ªìng ki·ªÉm'),
              const SizedBox(width: 8),
              GestureDetector(
                onTap: () => _showInspectionDialog(context),
                child: Container(
                  width: 20,
                  height: 20,
                  decoration: BoxDecoration(
                    color: const Color(0xFF4A90E2).withOpacity(0.1),
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: const Color(0xFF4A90E2).withOpacity(0.3),
                      width: 1,
                    ),
                  ),
                  child: const Center(
                    child: Text(
                      '!',
                      style: TextStyle(
                        color: Color(0xFF4A90E2),
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  String _formatCurrency(int value) {
    final s = value.toString();
    final b = StringBuffer();
    for (int i = 0; i < s.length; i++) {
      final p = s.length - i;
      b.write(s[i]);
      if (p > 1 && p % 3 == 1) b.write('.');
    }
    return '${b.toString()}‚Ç´';
  }
}
