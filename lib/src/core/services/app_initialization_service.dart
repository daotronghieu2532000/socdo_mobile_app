import 'api_service.dart';

class AppInitializationService {
  static final AppInitializationService _instance = AppInitializationService._internal();
  factory AppInitializationService() => _instance;
  AppInitializationService._internal();

  final ApiService _apiService = ApiService();
  bool _isInitialized = false;

  /// Kh·ªüi t·∫°o app - g·ªçi khi app start
  Future<bool> initializeApp() async {
    if (_isInitialized) {
      print('‚úÖ App ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return true;
    }

    print('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o app...');
    
    try {
      // L·∫•y token (s·∫Ω t·ª± ƒë·ªông check cache ho·∫∑c fetch m·ªõi)
      final token = await _apiService.getValidToken();
      
      if (token != null) {
        _isInitialized = true;
        print('‚úÖ Kh·ªüi t·∫°o app th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå Kh√¥ng th·ªÉ l·∫•y token, kh·ªüi t·∫°o th·∫•t b·∫°i');
        return false;
      }
    } catch (e) {
      print('‚ùå L·ªói kh·ªüi t·∫°o app: $e');
      return false;
    }
  }

  /// Ki·ªÉm tra app ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
  bool get isInitialized => _isInitialized;

  /// Reset tr·∫°ng th√°i kh·ªüi t·∫°o (d√πng khi logout)
  void resetInitialization() {
    _isInitialized = false;
    print('üîÑ Reset tr·∫°ng th√°i kh·ªüi t·∫°o app');
  }

  /// Kh·ªüi t·∫°o l·∫°i app (force refresh token)
  Future<bool> reinitializeApp() async {
    _isInitialized = false;
    await _apiService.refreshToken();
    return await initializeApp();
  }
}
